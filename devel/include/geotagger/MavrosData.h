// Generated by gencpp from file geotagger/MavrosData.msg
// DO NOT EDIT!


#ifndef GEOTAGGER_MESSAGE_MAVROSDATA_H
#define GEOTAGGER_MESSAGE_MAVROSDATA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace geotagger
{
template <class ContainerAllocator>
struct MavrosData_
{
  typedef MavrosData_<ContainerAllocator> Type;

  MavrosData_()
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , compass_heading(0.0)
    , yaw(0.0)
    , timestamp()  {
    }
  MavrosData_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , compass_heading(0.0)
    , yaw(0.0)
    , timestamp()  {
  (void)_alloc;
    }



   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _compass_heading_type;
  _compass_heading_type compass_heading;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef ros::Time _timestamp_type;
  _timestamp_type timestamp;





  typedef boost::shared_ptr< ::geotagger::MavrosData_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::geotagger::MavrosData_<ContainerAllocator> const> ConstPtr;

}; // struct MavrosData_

typedef ::geotagger::MavrosData_<std::allocator<void> > MavrosData;

typedef boost::shared_ptr< ::geotagger::MavrosData > MavrosDataPtr;
typedef boost::shared_ptr< ::geotagger::MavrosData const> MavrosDataConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::geotagger::MavrosData_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::geotagger::MavrosData_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::geotagger::MavrosData_<ContainerAllocator1> & lhs, const ::geotagger::MavrosData_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.compass_heading == rhs.compass_heading &&
    lhs.yaw == rhs.yaw &&
    lhs.timestamp == rhs.timestamp;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::geotagger::MavrosData_<ContainerAllocator1> & lhs, const ::geotagger::MavrosData_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace geotagger

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::geotagger::MavrosData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::geotagger::MavrosData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geotagger::MavrosData_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::geotagger::MavrosData_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geotagger::MavrosData_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::geotagger::MavrosData_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::geotagger::MavrosData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "504b4cf00b55003d0350cb2c79a82ffc";
  }

  static const char* value(const ::geotagger::MavrosData_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x504b4cf00b55003dULL;
  static const uint64_t static_value2 = 0x0350cb2c79a82ffcULL;
};

template<class ContainerAllocator>
struct DataType< ::geotagger::MavrosData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geotagger/MavrosData";
  }

  static const char* value(const ::geotagger::MavrosData_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::geotagger::MavrosData_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# geotagger/MavrosData.msg\n"
"\n"
"#include \"std_msgs/Header.msg\"\n"
"\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"float64 altitude\n"
"float64 compass_heading\n"
"float64 yaw\n"
"time timestamp\n"
;
  }

  static const char* value(const ::geotagger::MavrosData_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::geotagger::MavrosData_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.compass_heading);
      stream.next(m.yaw);
      stream.next(m.timestamp);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MavrosData_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::geotagger::MavrosData_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::geotagger::MavrosData_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "compass_heading: ";
    Printer<double>::stream(s, indent + "  ", v.compass_heading);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "timestamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.timestamp);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GEOTAGGER_MESSAGE_MAVROSDATA_H
